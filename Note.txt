_Input System dùng để tạo các action cho đối tượng như người chơi...

_Hàm magnitude dùng để tính độ lớn của vector = Căn bậc 2 của (x^2 + y^2 + z^2)

_aimLayerMask: Đây là một layer mask được sử dụng để chỉ ra những layer nào sẽ được xem xét 
khi kiểm tra va chạm. Chỉ các đối tượng thuộc các layer được chỉ định trong layer mask này mới sẽ được xem xét 
trong quá trình kiểm tra va chạm

_Chuẩn hóa vector: Ví dụ, nếu bạn có một vector có độ dài lớn hơn 1, ví dụ (2, 2, 2), 
thì sau khi áp dụng hàm Normalize(), nó sẽ trở thành một vector có độ dài bằng 1 nhưng vẫn giữ nguyên hướng, 
tức là (0.577, 0.577, 0.577). Nếu vector ban đầu đã có độ dài là 1 hoặc là một vector không đổi (0, 0, 0), 
thì hàm Normalize() sẽ không làm thay đổi nó

_float xVelocity = Vector3.Dot(moveDirection.normalized, transform.right);
Dot dùng để tính tích vô hướng giữa 2 vector, transform.right = (1,0,0)

_Has Exit Time: Khi bạn tạo một transition giữa hai trạng thái trong Animator Controller, 
bạn có thể thiết lập exit time để xác định thời gian mà animator phải ở trong trạng thái hiện tại 
trước khi chuyển sang trạng thái tiếp theo. Nếu exit time được thiết lập, 
animator sẽ phải chờ cho đến khi thời gian trôi qua tương ứng với exit time trước khi chuyển đến trạng thái mới.

_private enum GrabType { SideGrab, BackGrab}
Console.Write(GrabType.SideGrab) => Kết quả: SideGrab
Console.Write((float)GrabType.SideGrab) => Kết quả: 0

_transform.rotation = Quaternion.Slerp(transform.rotation, desiredRotation, turnSpeed * Time.deltaTime);
_Hàm Slerp sử dụng nội suy tuyến tính để chuyển từ giá trị transform.rotation sang desiredRotation với bước nhảy là turnSpeed * Time.deltaTime
**Xem Phần 5 (38. Smooth character rotation - Lerp & Slerp) 

_float clampedDistance = Mathf.Clamp(distanceToDesiredPosition, minCameraDistance, maxCameraDistance);
_Hàm này nhận ba đối số: giá trị cần hạn chế (distanceToDesiredPosition), giá trị tối thiểu (minCameraDistance), 
và giá trị tối đa (maxCameraDistance). Nó trả về giá trị của distanceToDesiredPosition nhưng nếu nó nhỏ hơn minCameraDistance 
thì trả về minCameraDistance, và nếu nó lớn hơn maxCameraDistance thì trả về maxCameraDistance.

_Universal Render Pipeline is a modern and optimized rendering tool in unity that is designed to be 
flexible, scalable, and provide high-quality graphics across a wide range of devices.


